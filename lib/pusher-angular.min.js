"use strict";angular.module("pusher-angular",[]).factory("$pusher",["$rootScope","$channel","$connection",function(n,e,t){function i(n){return this instanceof i?(this._assertValidClient(n),this.client=n,this.connection=t(n.connection,n),void(this.channels={})):new i(n)}return i.prototype={subscribe:function(n){var t=e(this.client.subscribe(n),this);return this.channels[n]=t,t},unsubscribe:function(n){this.client.channel(n)&&(this.client.unsubscribe(n),this.channels[n]&&delete this.channels[n])},bind:function(e,t){this.client.bind(e,function(e){t(e),n.$$phase||n.$digest()})},bind_all:function(e){this.client.bind_all(function(t,i){e(t,i),n.$$phase||n.$digest()})},unbind:function(n,e){this.client.unbind(n,e)},disconnect:function(){this.client.disconnect()},channel:function(n){return this.channels[n]},allChannels:function(){return this.channels},_assertValidClient:function(n){if(!angular.isObject(n)||!angular.isObject(n.connection)||"function"!=typeof n.channel)throw new Error("Invalid Pusher client object")}},i}]).factory("$channel",["$rootScope","$members",function(n,e){function t(n){if(-1==n.indexOf("presence-")&&-1==n.indexOf("private-"))throw new Error("Presence or private channel required")}function i(n,t){return this instanceof i?(this._assertValidChannel(n),this.baseChannel=n,this.client=t,this.name=n.name,void(-1==n.name.indexOf("presence")?this.members=function(){throw new Error("Members object only exists for presence channels")}:this.members=e(n.members,n))):new i(n,t)}return i.prototype={bind:function(e,t){this.baseChannel.bind(e,function(e){t(e),n.$$phase||n.$digest()})},unbind:function(n,e){this.baseChannel.unbind(n,e)},bind_all:function(e){this.baseChannel.bind_all(function(t,i){e(t,i),n.$$phase||n.$digest()})},trigger:function(n,e){if(t(this.name),-1==n.indexOf("client-"))throw new Error("Event name requires 'client-' prefix");return this.baseChannel.trigger(n,e)},_assertValidChannel:function(n){if(!angular.isObject(n)||"string"!=typeof n.name)throw new Error("Invalid Pusher channel object")}},i}]).factory("$members",["$rootScope",function(n){function e(t,i){if(!(this instanceof e))return new e(t,i);var s=this;this._assertValidMembers(t),this.baseMembers=t,this.baseChannel=i,this.me={},this.count=0,this.members={},i.bind("pusher:subscription_succeeded",function(e){s.me=e.me,s.count=e.count,s.members=e.members,n.$$phase||n.$digest()}),i.bind("pusher:member_added",function(e){s.count++,e.info?s.members[e.id.toString()]=e.info:s.members[e.id.toString()]=null,n.$$phase||n.$digest()}),i.bind("pusher:member_removed",function(e){s.count--,delete s.members[e.id.toString()],n.$$phase||n.$digest()})}return e.prototype={get:function(n){return this.baseMembers.get(n)},each:function(e){this.baseMembers.each(function(t){e(t),n.$$phase||n.$digest()})},_assertValidMembers:function(n){if(!angular.isObject(n)||"object"!=typeof n.me)throw new Error("Invalid Pusher channel members object")}},e}]).factory("$connection",["$rootScope",function(n){function e(n,t){return this instanceof e?(this._assertValidConnection(n),this.baseConnection=n,void(this.baseClient=t)):new e(n,t)}return e.prototype={bind:function(e,t){this.baseConnection.bind(e,function(e){t(e),n.$$phase||n.$digest()})},bind_all:function(e){this.baseConnection.bind_all(function(t,i){e(t,i),n.$$phase||n.$digest()})},_assertValidConnection:function(n){if(!angular.isObject(n))throw new Error("Invalid Pusher connection object")}},e}]);
